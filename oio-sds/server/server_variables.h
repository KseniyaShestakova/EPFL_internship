/*
Copyright (C) 2017-2019 OpenIO SAS, as part of OpenIO SDS

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library.
*/

#ifndef OIO__OIO_SDS_SERVER_SERVER_VARIABLES_H_
#define OIO__OIO_SDS_SERVER_SERVER_VARIABLES_H_

#include "core/oiovar.h"

/* AUTO-GENERATED by confgen.py */

#ifndef OIO_ENBUG_SERVER_REQUEST_FAILURE_THRESHOLD
# define OIO_ENBUG_SERVER_REQUEST_FAILURE_THRESHOLD (0)
#endif

extern gint32 oio_server_request_failure_threshold;

#ifndef OIO_META_QUEUE_MAX_DELAY
# define OIO_META_QUEUE_MAX_DELAY (40 * G_TIME_SPAN_SECOND)
#endif

extern gint64 meta_queue_max_delay;

#ifndef OIO_SERVER_BATCH_ACCEPT
# define OIO_SERVER_BATCH_ACCEPT (64)
#endif

extern guint server_accept_batch_size;

#ifndef OIO_SERVER_BATCH_EVENTS
# define OIO_SERVER_BATCH_EVENTS (128)
#endif

extern guint server_event_batch_size;

#ifndef OIO_SERVER_CNX_TIMEOUT_IDLE
# define OIO_SERVER_CNX_TIMEOUT_IDLE (5 * G_TIME_SPAN_MINUTE)
#endif

extern gint64 server_cnx_ttl_idle;

#ifndef OIO_SERVER_CNX_TIMEOUT_NEVER
# define OIO_SERVER_CNX_TIMEOUT_NEVER (30 * G_TIME_SPAN_SECOND)
#endif

extern gint64 server_cnx_ttl_never;

#ifndef OIO_SERVER_CNX_TIMEOUT_PERSIST
# define OIO_SERVER_CNX_TIMEOUT_PERSIST (2 * G_TIME_SPAN_HOUR)
#endif

extern gint64 server_cnx_ttl_persist;

#ifndef OIO_SERVER_FD_MAX_PASSIVE
# define OIO_SERVER_FD_MAX_PASSIVE (0)
#endif

extern guint server_fd_max_passive;

#ifndef OIO_SERVER_MALLOC_TRIM_SIZE_ONDEMAND
# define OIO_SERVER_MALLOC_TRIM_SIZE_ONDEMAND (0)
#endif

extern guint malloc_trim_size_ondemand;

#ifndef OIO_SERVER_MALLOC_TRIM_SIZE_PERIODIC
# define OIO_SERVER_MALLOC_TRIM_SIZE_PERIODIC (0)
#endif

extern guint sqlx_periodic_malloctrim_size;

#ifndef OIO_SERVER_PERIODIC_DECACHE_MAX_BASES
# define OIO_SERVER_PERIODIC_DECACHE_MAX_BASES (1)
#endif

extern guint sqlx_periodic_decache_max_bases;

#ifndef OIO_SERVER_PERIODIC_DECACHE_MAX_DELAY
# define OIO_SERVER_PERIODIC_DECACHE_MAX_DELAY (500 * G_TIME_SPAN_MILLISECOND)
#endif

extern gint64 sqlx_periodic_decache_max_delay;

#ifndef OIO_SERVER_PERIODIC_DECACHE_PERIOD
# define OIO_SERVER_PERIODIC_DECACHE_PERIOD (0)
#endif

extern guint sqlx_periodic_decache_period;

#ifndef OIO_SERVER_POOL_MAX_IDLE
# define OIO_SERVER_POOL_MAX_IDLE (30 * G_TIME_SPAN_SECOND)
#endif

extern gint64 server_threadpool_max_idle;

#ifndef OIO_SERVER_POOL_MAX_TCP
# define OIO_SERVER_POOL_MAX_TCP (0)
#endif

extern gint server_threadpool_max_tcp;

#ifndef OIO_SERVER_POOL_MAX_UDP
# define OIO_SERVER_POOL_MAX_UDP (4)
#endif

extern gint server_threadpool_max_udp;

#ifndef OIO_SERVER_POOL_MAX_UNUSED
# define OIO_SERVER_POOL_MAX_UNUSED (20)
#endif

extern gint server_threadpool_max_unused;

#ifndef OIO_SERVER_QUEUE_MAX_DELAY
# define OIO_SERVER_QUEUE_MAX_DELAY (60 * G_TIME_SPAN_SECOND)
#endif

extern gint64 server_queue_max_delay;

#ifndef OIO_SERVER_QUEUE_WARN_DELAY
# define OIO_SERVER_QUEUE_WARN_DELAY (4 * G_TIME_SPAN_SECOND)
#endif

extern gint64 server_queue_warn_delay;

#ifndef OIO_SERVER_REQUEST_MAX_RUN_TIME
# define OIO_SERVER_REQUEST_MAX_RUN_TIME (300 * G_TIME_SPAN_SECOND)
#endif

extern gint64 sqlx_request_max_run_time;

#ifndef OIO_SERVER_TASK_MALLOC_TRIM_PERIOD
# define OIO_SERVER_TASK_MALLOC_TRIM_PERIOD (3600)
#endif

extern guint sqlx_periodic_malloctrim_period;

#ifndef OIO_SERVER_UDP_QUEUE_MAX
# define OIO_SERVER_UDP_QUEUE_MAX (512)
#endif

extern guint server_udp_queue_maxlen;

#ifndef OIO_SERVER_UDP_QUEUE_TTL
# define OIO_SERVER_UDP_QUEUE_TTL (1 * G_TIME_SPAN_SECOND)
#endif

extern gint64 server_udp_queue_ttl;

#ifndef OIO_SQLITEREPO_SERVICE_EXIT_TTL
# define OIO_SQLITEREPO_SERVICE_EXIT_TTL (10 * G_TIME_SPAN_SECOND)
#endif

extern gint64 sqliterepo_server_exit_ttl;

#ifndef OIO_SQLX_LB_REFRESH_PERIOD
# define OIO_SQLX_LB_REFRESH_PERIOD (1)
#endif

extern gint64 oio_sqlx_lb_refresh_period;

#ifndef OIO_UDP_ALLOWED
# define OIO_UDP_ALLOWED (TRUE)
#endif

extern gboolean oio_udp_allowed;


#endif /* OIO__OIO_SDS_SERVER_SERVER_VARIABLES_H_ */
